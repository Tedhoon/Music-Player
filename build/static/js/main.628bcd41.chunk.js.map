{"version":3,"sources":["Components/MusicPlayer.js","Music/MUSICTHEME.js","Pages/MainMusicPage.js","App.js","serviceWorker.js","index.js","Music/1.mp3","Music/Cover/1.jpg","Music/Cover/2.jpg","Music/Cover/3.jpg"],"names":["React","memo","playList","useEffect","console","log","defaultPlayIndex","theme","bounds","clearPriorAudioLists","autoPlayInitLoadPlayList","preload","glassBg","remember","remove","defaultPosition","top","right","defaultPlayMode","mode","once","autoPlay","toggleMode","showMiniModeCover","showMiniProcessBar","drag","seeked","showProgressLoadBar","showPlay","showReload","showDownload","showPlayMode","showDestroy","extendsContent","defaultVolume","playModeShowTime","loadAudioErrorPlayNext","autoHiddenCover","spaceBar","audioLists","MUSICTHEME1","name","cover","COVER1","musicSrc","MUSIC1","COVER2","MUSIC2","COVER3","MUSIC3","MUSICTHEME2","MainMusicPage","useState","setPlayList","playMusicTheme","event","id","target","addMusic","e","map","music","key","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"oOA8DeA,UAAMC,MA1DrB,YAAkC,IAAZC,EAAW,EAAXA,SAmDlB,OARAC,qBAAU,WACNC,QAAQC,IAAIH,KACb,CAACA,IAOA,oCACKA,GAAY,kBAAC,IAAD,iBA/CL,CACZI,iBAAkB,EAClBC,MAAO,OACPC,OAAQ,OACRC,sBAAsB,EACtBC,0BAA0B,EAC1BC,SAAS,EACTC,SAAS,EACTC,UAAU,EACVC,QAAQ,EACRC,gBAAiB,CACbC,IAAK,IACLC,MAAO,IAEXC,gBAAiB,aACjBC,KAAM,OACNC,MAAM,EACNC,UAAU,EACVC,YAAY,EACZC,mBAAmB,EACnBC,oBAAoB,EACpBC,MAAM,EACNC,QAAQ,EACRC,qBAAqB,EACrBC,UAAU,EACVC,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,eAAgB,GAChBC,cAAe,IACfC,iBAAkB,IAClBC,wBAAwB,EACxBC,iBAAiB,EACjBC,UAAU,GAaO,CAAiCC,WAAYrC,S,mFChDzDsC,EAAc,CACvB,CACIC,KAAM,SACNC,MAAOC,IACPC,SAAUC,KAEd,CACIJ,KAAM,SACNC,MAAOI,IACPF,SAAUG,KAEd,CACIN,KAAM,SACNC,MAAOM,IACPJ,SAAUK,MAILC,EAAc,CACvB,CACIT,KAAM,WACNC,MAAOC,IACPC,SAAUC,KAEd,CACIJ,KAAM,WACNC,MAAOI,IACPF,SAAUG,KAEd,CACIN,KAAM,WACNC,MAAOM,IACPJ,SAAUK,MCwBHE,MA7Df,WAA2B,IAAD,EAEUC,mBAAS,IAFnB,mBAEflD,EAFe,KAELmD,EAFK,KAIhBC,EAAiB,SAACC,GAAW,IACvBC,EAAOD,EAAME,OAAbD,GAER,OADApD,QAAQC,IAAImD,GACJA,GACJ,IAAK,cACDpD,QAAQC,IAAI,iBAIZgD,EAAY,GAAD,mBAAKnD,GAAL,YAAkBsC,KAQ7B,MACJ,IAAK,cACDpC,QAAQC,IAAI,iBACZgD,EAAY,GAAD,mBAAKnD,GAAL,YAAkBgD,KAC7B,MACJ,QACI,SAKNQ,EAAW,SAACC,GACdN,EAAY,GAAD,mBAAKnD,GAAL,CAAesC,EAAYmB,EAAEF,OAAOD,QAenD,OAZArD,qBAAU,cAUP,CAACD,IAGA,oCAGQsC,EAAYoB,KAAI,SAACC,EAAOC,GAAR,OAAgB,4BAAQC,QAASL,EAAUF,GAAIM,GAAMD,EAAMpB,SAE/E,4BAAQsB,QAAST,EAAgBE,GAAG,eAApC,kBACA,4BAAQO,QAAST,EAAgBE,GAAG,eAApC,kBACCtD,GAAY,kBAAC,EAAD,CAAaA,SAAUA,MC3CjC8D,MAVf,WACE,OACE,yBAAKC,UAAU,OAGb,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/E,QAAQ+E,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B","file":"static/js/main.628bcd41.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactJkMusicPlayer from \"react-jinke-music-player\";\r\nimport \"react-jinke-music-player/assets/index.css\";\r\n\r\nfunction MusicPlayer({playList}) {\r\n    // console.log(\"뮤직플레이어 작동!!!\")\r\n    // console.log(playList)\r\n    // const [audioLists, setAudioLists] = useState(playList)\r\n    \r\n    // console.log(\"오디오 리스트:\", audioLists)\r\n    const options = {\r\n        defaultPlayIndex: 0,\r\n        theme: 'dark',\r\n        bounds: 'body',\r\n        clearPriorAudioLists: true,\r\n        autoPlayInitLoadPlayList: true,\r\n        preload: false,\r\n        glassBg: false,\r\n        remember: false,\r\n        remove: true,\r\n        defaultPosition: {\r\n            top: 150,\r\n            right: 10,\r\n        },\r\n        defaultPlayMode: 'singleLoop',\r\n        mode: 'mini',\r\n        once: false,\r\n        autoPlay: true,\r\n        toggleMode: true,\r\n        showMiniModeCover: true,\r\n        showMiniProcessBar: false,\r\n        drag: true,\r\n        seeked: true,\r\n        showProgressLoadBar: true,\r\n        showPlay: true,\r\n        showReload: false,\r\n        showDownload: false,\r\n        showPlayMode: false,\r\n        showDestroy: false,\r\n        extendsContent: [],\r\n        defaultVolume: 0.05,\r\n        playModeShowTime: 600,\r\n        loadAudioErrorPlayNext: true,\r\n        autoHiddenCover: false,\r\n        spaceBar: true,\r\n\r\n    };\r\n    useEffect(() => {\r\n        console.log(playList)\r\n    }, [playList])\r\n    // const onSetAudioList = () => {\r\n    //     let a = []\r\n    //     // a = playList\r\n    //     // setAudioLists(playList)\r\n    // }\r\n    return (\r\n        <>\r\n            {playList && <ReactJkMusicPlayer {...options} audioLists={playList} /> }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(MusicPlayer);","import MUSIC1 from './1.mp3';\r\nimport MUSIC2 from './1.mp3';\r\nimport MUSIC3 from './1.mp3';\r\n\r\nimport COVER1 from './Cover/1.jpg';\r\nimport COVER2 from './Cover/2.jpg';\r\nimport COVER3 from './Cover/3.jpg';\r\n\r\n\r\nexport const MUSICTHEME1 = [\r\n    {\r\n        name: 'music1',\r\n        cover: COVER1,\r\n        musicSrc: MUSIC1\r\n    },\r\n    {\r\n        name: 'music2',\r\n        cover: COVER2,\r\n        musicSrc: MUSIC2\r\n    },\r\n    {\r\n        name: 'music3',\r\n        cover: COVER3,\r\n        musicSrc: MUSIC3\r\n    },\r\n]\r\n\r\nexport const MUSICTHEME2 = [\r\n    {\r\n        name: 'music1-2',\r\n        cover: COVER1,\r\n        musicSrc: MUSIC1\r\n    },\r\n    {\r\n        name: 'music2-2',\r\n        cover: COVER2,\r\n        musicSrc: MUSIC2\r\n    },\r\n    {\r\n        name: 'music3-2',\r\n        cover: COVER3,\r\n        musicSrc: MUSIC3\r\n    },\r\n]","import React, { useState, useEffect } from 'react';\r\nimport { MUSICTHEME1, MUSICTHEME2 } from '../Music/MUSICTHEME';\r\nimport MusicPlayer from '../Components/MusicPlayer';\r\n\r\nfunction MainMusicPage () {\r\n\r\n    const [playList, setPlayList] = useState([])\r\n    \r\n    const playMusicTheme = (event) => {\r\n        const { id } = event.target;\r\n        console.log(id)\r\n        switch (id) {\r\n            case \"MUSICTHEME1\":\r\n                console.log(\"1실행\")\r\n                // setPlayList([...playList, MUSICTHEME1[0],MUSICTHEME1[1],MUSICTHEME1[2]])\r\n                // setPlayList([...playList, MUSICTHEME1])\r\n\r\n                setPlayList([...playList, ...MUSICTHEME1])\r\n                // console.log([...playList])\r\n                // console.log(typeof(MUSICTHEME1))\r\n                // console.log(typeof(MUSICTHEME1[0],MUSICTHEME1[2]))\r\n                // console.log(MUSICTHEME1)\r\n                // console.log([...MUSICTHEME1])\r\n                // console.log(MUSICTHEME1[0],MUSICTHEME1[1],MUSICTHEME1[2])\r\n                // console.log([MUSICTHEME1[0], MUSICTHEME1[1], MUSICTHEME1[2]])\r\n                break;\r\n            case \"MUSICTHEME2\":\r\n                console.log(\"2실행\")\r\n                setPlayList([...playList, ...MUSICTHEME2])\r\n                break;\r\n            default:\r\n                return;\r\n\r\n        }\r\n    }\r\n\r\n    const addMusic = (e) => {\r\n        setPlayList([...playList, MUSICTHEME1[e.target.id]])\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(playList);\r\n        // console.log(...playList)\r\n        // console.log([...playList, [MUSICTHEME2[0]]])\r\n        \r\n        // console.log([...playList] + MUSICTHEME2[0])\r\n        // console.log(MUSICTHEME1)\r\n        // console.log(MUSICTHEME2)\r\n        // console.log(MUSICTHEME2[0])\r\n        // console.log([playList])\r\n    }, [playList])\r\n\r\n    return (\r\n        <>\r\n\r\n            {\r\n                MUSICTHEME1.map((music, key) => <button onClick={addMusic} id={key}>{music.name}</button>)\r\n            }\r\n            <button onClick={playMusicTheme} id=\"MUSICTHEME1\">테마 1</button>\r\n            <button onClick={playMusicTheme} id=\"MUSICTHEME2\">테마 2</button>\r\n            {playList && <MusicPlayer playList={playList} />}        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainMusicPage;\r\n\r\n/*\r\n    1. 뮤직 리스팅\r\n    2. Redux-persist 연결해서 현재 playList추가\r\n    3. \r\n*/","import React from 'react';\nimport './App.css';\nimport MusicPlayer from './Components/MusicPlayer';\n// import IU_MUSIC from './Music/iu-블루밍.mp3';\n// import IU_COVER from './Music/Cover/iu-블루밍.jpg'\nimport MainMusicPage from './Pages/MainMusicPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <MusicPlayer music={IU_MUSIC} icon={IU_COVER} /> */}\n      \n      <MainMusicPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/1.30693a95.mp3\";","module.exports = __webpack_public_path__ + \"static/media/1.75419257.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.5d0f0eed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.5d0f0eed.jpg\";"],"sourceRoot":""}